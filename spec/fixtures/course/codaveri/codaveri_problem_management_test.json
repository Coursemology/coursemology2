{"api_version":"latest","language_version":{"language":"python","version":"3.10"},"files_solution":[{"path":"template.py","prefix":"import csv\r\n\r\ndef read_csv(csvfilename):\r\n    with open(csvfilename) as f:\r\n        return tuple(tuple(row) for row in csv.reader(f))\r\n\r\n#######################\r\n# OPERATION_TABLE ADT #\r\n#######################\r\n\r\nOPERATION_TABLE = {}\r\nVALID_TAGS = ('dna', 'rna', 'protein')\r\n\r\ndef put_op(name, tuple_of_tags_types, operator):\r\n    if name not in OPERATION_TABLE:\r\n        OPERATION_TABLE[name] = {}\r\n    OPERATION_TABLE[name][tuple_of_tags_types] = operator\r\n\r\ndef get_op(name, tuple_of_tags_types):\r\n    if not all(map(lambda tag_type: tag_type in VALID_TAGS, tuple_of_tags_types)):\r\n        raise Exception('Invalid tag-type(s). Are you sure you are working with Tagged-Data?')\r\n    if name not in OPERATION_TABLE:\r\n        raise Exception(f'Missing operation: {name}. Did you misspell the operation or forget to put_op?')\r\n    if tuple_of_tags_types not in OPERATION_TABLE[name]:\r\n        raise Exception(f'Missing operation for these tags: {tuple_of_tags_types}. Did you forget to put_op?')\r\n    return OPERATION_TABLE[name][tuple_of_tags_types]\r\n\r\n#############################\r\n# Functions from Mission 11 #\r\n#############################\r\n\r\ndef replicate(dna_strand):\r\n    dna_base_pairings = dict([\"AT\",\"TA\",\"GC\",\"CG\"])\r\n    return \"\".join(dna_base_pairings[base] for base in dna_strand[::-1])\r\n\r\ndef transcribe(dna_strand):\r\n    return replicate(dna_strand).replace('T','U')\r\n\r\ndef reverse_transcribe(rna_strand):\r\n    return replicate(rna_strand.replace('U','T'))\r\n\r\ndef get_mapping(csvfilename):\r\n    data = read_csv(csvfilename)[1:]\r\n    return {codon: amino for codon, *_, amino in data}\r\n\r\ndef translate(rna_strand):\r\n    codon2amino = get_mapping(\"codon_mapping.csv\")\r\n    if \"AUG\" in rna_strand:\r\n        protein, start = '', rna_strand.index(\"AUG\")\r\n        for x in range(start+3, len(rna_strand)+1, 3):\r\n            protein += codon2amino[rna_strand[x-3:x]]\r\n            if protein[-1] == '_':\r\n                return protein\r\n\r\n##########\r\n# Task 1 #\r\n##########\r\n# Abstraction changed to check if students broke abstraction here\r\ndef tag(type, data):\r\n    def helper(code):\r\n        if code == 'foo':\r\n            return type\r\n        elif code == 'bar':\r\n            return data\r\n    return helper\r\n\r\ndef get_tag_type(tagged_data):\r\n    return tagged_data('foo')\r\n\r\ndef get_data(tagged_data):\r\n    return tagged_data('bar')\r\n    \r\n##########\r\n# Task 2 #\r\n##########\r\n    \r\n### DO NOT CHANGE THE CODE IN THIS BOX ##################################\r\n                                                                        #\r\nput_op(\"to_dna\", (\"dna\",), lambda x: x)                                 #\r\nput_op(\"to_dna\", (\"rna\",), reverse_transcribe)                          #\r\nput_op(\"to_rna\", (\"dna\",), transcribe)                                  #\r\nput_op(\"to_rna\", (\"rna\",), lambda x: x)                                 #\r\nput_op(\"is_same_dogma\", (\"dna\",\"dna\"), lambda x, y: x == y)             #\r\nput_op(\"is_same_dogma\", (\"dna\",\"rna\"), lambda x, y: transcribe(x) == y) #\r\nput_op(\"is_same_dogma\", (\"rna\",\"dna\"), lambda x, y: x == transcribe(y)) #\r\nput_op(\"is_same_dogma\", (\"rna\",\"rna\"), lambda x, y: x == y)             #\r\n                                                                        #\r\ndef to_dna(tagged_data):                                                #\r\n    tag_type = get_tag_type(tagged_data)                                #\r\n    data     = get_data(tagged_data)                                    #\r\n    op       = get_op(\"to_dna\", (tag_type,))                            #\r\n    return tag(\"dna\", op(data))                                         #\r\n                                                                        #\r\n### DO NOT CHANGE THE CODE IN THIS BOX ##################################\n","content":"### DO NOT CHANGE THE CODE IN THIS BOX ##################################\r\n                                                                        #\r\nput_op(\"to_dna\", (\"dna\",), lambda x: x)                                 #\r\nput_op(\"to_dna\", (\"rna\",), reverse_transcribe)                          #\r\nput_op(\"to_rna\", (\"dna\",), transcribe)                                  #\r\nput_op(\"to_rna\", (\"rna\",), lambda x: x)                                 #\r\nput_op(\"is_same_dogma\", (\"dna\",\"dna\"), lambda x, y: x == y)             #\r\nput_op(\"is_same_dogma\", (\"dna\",\"rna\"), lambda x, y: transcribe(x) == y) #\r\nput_op(\"is_same_dogma\", (\"rna\",\"dna\"), lambda x, y: x == transcribe(y)) #\r\nput_op(\"is_same_dogma\", (\"rna\",\"rna\"), lambda x, y: x == y)             #\r\n                                                                        #\r\ndef to_dna(tagged_data):                                                #\r\n    tag_type = get_tag_type(tagged_data)                                #\r\n    data     = get_data(tagged_data)                                    #\r\n    op       = get_op(\"to_dna\", (tag_type,))                            #\r\n    return tag(\"dna\", op(data))                                         #\r\n                                                                        #\r\n### DO NOT CHANGE THE CODE IN THIS BOX ##################################\r\n\r\n# [Marking Scheme]\r\n# 3 marks for to_rna\r\n#   +1 keeps Tagged-Data abstraction, uses get_tag_type/get_data\r\n#   +1 keeps OPERATION_TABLE abstraction, uses get_op\r\n#   +1 returns a correctly tagged Tagged-Data object\r\n# 3 marks for is_same_dogma\r\n#   +2 both abstractions as above\r\n#   +1 returns a boolean\r\n# Total: 6 marks\r\n# Note: Do not double-deduct breaking of abstraction for each ADT\r\n\r\ndef to_rna(tagged_data):\r\n    tag_type = get_tag_type(tagged_data)\r\n    data     = get_data(tagged_data)\r\n    op       = get_op(\"to_rna\", (tag_type,))\r\n    return tag(\"rna\", op(data))\r\n\r\ndef is_same_dogma(tagged_data1, tagged_data2):\r\n    tag_type1 = get_tag_type(tagged_data1)\r\n    tag_type2 = get_tag_type(tagged_data2)\r\n    op        = get_op(\"is_same_dogma\", (tag_type1, tag_type2))\r\n    data1     = get_data(tagged_data1)\r\n    data2     = get_data(tagged_data2)\r\n    return op(data1, data2)\n","suffix":"\ntagged_dna1 = tag(\"dna\", \"AAATGC\")\r\ntagged_rna1 = tag(\"rna\", \"GCAUUU\")\r\ntagged_dna2 = tag(\"dna\", \"TTACAT\")\r\ntagged_rna2 = tag(\"rna\", \"AUGUAA\")\r\n\r\n\n"},{"path":"codon_mapping.csv","prefix":"","content":"codon,amino_acid,3_letter_abbreviation,1_letter_abbreviation\nAAA,Lysine,Lys,K\nAAC,Asparagine,Asn,N\nAAG,Lysine,Lys,K\nAAU,Asparagine,Asn,N\nACA,Threonine,Thr,T\nACC,Threonine,Thr,T\nACG,Threonine,Thr,T\nACU,Threonine,Thr,T\nAGA,Arginine,Arg,R\nAGC,Serine,Ser,S\nAGG,Arginine,Arg,R\nAGU,Serine,Ser,S\nAUA,Isoleucine,Ile,I\nAUC,Isoleucine,Ile,I\nAUG,Methionine,Met,M\nAUU,Isoleucine,Ile,I\nCAA,Glutamine,Gln,Q\nCAC,Histidine,His,H\nCAG,Glutamine,Gln,Q\nCAU,Histidine,His,H\nCCA,Proline,Pro,P\nCCC,Proline,Pro,P\nCCG,Proline,Pro,P\nCCU,Proline,Pro,P\nCGA,Arginine,Arg,R\nCGC,Arginine,Arg,R\nCGG,Arginine,Arg,R\nCGU,Arginine,Arg,R\nCUA,Leucine,Leu,L\nCUC,Leucine,Leu,L\nCUG,Leucine,Leu,L\nCUU,Leucine,Leu,L\nGAA,Glutamic acid,Glu,E\nGAC,Aspartic acid,Asp,D\nGAG,Glutamic acid,Glu,E\nGAU,Aspartic acid,Asp,D\nGCA,Alanine,Ala,A\nGCC,Alanine,Ala,A\nGCG,Alanine,Ala,A\nGCU,Alanine,Ala,A\nGGA,Glycine,Gly,G\nGGC,Glycine,Gly,G\nGGG,Glycine,Gly,G\nGGU,Glycine,Gly,G\nGUA,Valine,Val,V\nGUC,Valine,Val,V\nGUG,Valine,Val,V\nGUU,Valine,Val,V\nUAA,Stop codon,STOP,_\nUAC,Tyrosine,Tyr,Y\nUAG,Stop codon,STOP,_\nUAU,Tyrosine,Tyr,Y\nUCA,Serine,Ser,S\nUCC,Serine,Ser,S\nUCG,Serine,Ser,S\nUCU,Serine,Ser,S\nUGA,Stop codon,STOP,_\nUGC,Cysteine,Cys,C\nUGG,Tryptophan,Trp,W\nUGU,Cysteine,Cys,C\nUUA,Leucine,Leu,L\nUUC,Phenylalanine,Phe,F\nUUG,Leucine,Leu,L\nUUU,Phenylalanine,Phe,F","suffix":""}],"testcases":[{"id":293,"type":"expression","timeout":10000,"prefix":"_out = get_data(to_rna(tagged_dna1))","expression":"_out == 'GCAUUU'","display":"\"'\" + _out + \"'\" if isinstance(_out, str) else _out"},{"id":294,"type":"expression","timeout":10000,"prefix":"_out = get_data(to_rna(tagged_rna1))","expression":"_out == 'GCAUUU'","display":"\"'\" + _out + \"'\" if isinstance(_out, str) else _out"},{"id":295,"type":"expression","timeout":10000,"prefix":"_out = is_same_dogma(tagged_dna1, tagged_rna1)","expression":"_out == True","display":"\"'\" + _out + \"'\" if isinstance(_out, str) else _out"},{"id":296,"type":"expression","timeout":10000,"prefix":"_out = is_same_dogma(tagged_rna1, tagged_rna1)","expression":"_out == True","display":"\"'\" + _out + \"'\" if isinstance(_out, str) else _out"},{"id":297,"type":"expression","timeout":10000,"prefix":"_out = is_same_dogma(tagged_rna1, tagged_dna2)","expression":"_out == False","display":"\"'\" + _out + \"'\" if isinstance(_out, str) else _out"},{"id":291,"type":"expression","timeout":10000,"prefix":"_out = get_tag_type(to_rna(tagged_dna1))","expression":"_out == 'rna'","display":"\"'\" + _out + \"'\" if isinstance(_out, str) else _out"},{"id":292,"type":"expression","timeout":10000,"prefix":"_out = get_tag_type(to_dna(tagged_rna1))","expression":"_out == 'dna'","display":"\"'\" + _out + \"'\" if isinstance(_out, str) else _out"}]}
