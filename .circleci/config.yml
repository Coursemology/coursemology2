# Ruby CircleCI 2.1 configuration file
#
# Check https://circleci.com/docs/2.0/language-ruby/ for more details
#
version: 2.1
orbs:
  browser-tools: circleci/browser-tools@1.2.3
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: cimg/ruby:2.7.4-browsers
        environment:
          BUNDLE_APP_CONFIG: ~/repo/.bundle

    working_directory: ~/repo

    steps:
      - checkout

      # Checkout submodules
      - run: git submodule update --init --recursive

      # Install bundler version
      - run:
          name: install bundler version
          command: gem install bundler:1.17.3

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v3.2-dependencies-{{ checksum "Gemfile.lock" }}
            # fallback to using the latest cache if no exact match is found
            - v3.2-dependencies-

      - run:
          name: install dependencies
          command: |
            bundle install --jobs=4 --retry=3 --path vendor/bundle --without development:production --deployment

      - save_cache:
          paths:
            - ./vendor/bundle
            - ./.bundle
          key: v3.2-dependencies-{{ checksum "Gemfile.lock" }}

      - restore_cache:
          keys:
            - v1-yarn-{{ checksum "client/yarn.lock" }}

      # Build frontend JS
      - run: cd client && yarn install && yarn build:production && cd -

      - save_cache:
          paths:
            - ./client/node_modules
            - ./client/build
            - ./public/webpack
          key: v1-yarn-{{ checksum "client/yarn.lock" }}

  test:
    docker:
      # specify the version you desire here
      - image: cimg/ruby:2.7.4-browsers
        environment:
          PG_HOST: localhost
          PG_USER: ubuntu
          RAILS_ENV: test
          BUNDLE_APP_CONFIG: ~/repo/.bundle

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      - image: circleci/postgres:9.6.11
        environment:
          POSTGRES_USER: ubuntu
          POSTGRES_DB: coursemology_test

    parallelism: 25

    working_directory: ~/repo

    steps:
      - browser-tools/install-chrome
      - browser-tools/install-chromedriver

      - checkout

      # Checkout submodules
      - run: git submodule update --init --recursive

      - restore_cache:
          keys:
            - v3.2-dependencies-{{ checksum "Gemfile.lock" }}
            # fallback to using the latest cache if no exact match is found
            - v3.2-dependencies-

      - restore_cache:
          keys:
            - v1-yarn-{{ checksum "client/yarn.lock" }}

      # Install bundler version
      - run:
          name: install bundler version
          command: |
            gem install bundler:1.17.3
            bundle install

      # Install ghostscript so `identify` in ImageMagick works with PDF files.
      # Remove pdf security policy for imagemagick (ubuntu 20.04)
      # https://stackoverflow.com/questions/52998331/imagemagick-security-policy-pdf-blocking-conversion
      - run:
          name: install ghostscript and imagemagick
          command: |
            sudo apt update
            sudo apt install imagemagick
            sudo apt install ghostscript
            sudo sed -i '/disable ghostscript format types/,+6d' /etc/ImageMagick-6/policy.xml

      - setup_remote_docker

      # Database setup
      - run:
          name: Setup DB
          command: |
            bundle exec rake db:setup
          environment:
            DATABASE_URL: "postgres://ubuntu@localhost:5432/coursemology_test"

      # run tests!
      - run:
          name: run
          no_output_timeout: 30m
          command: |
            mkdir /tmp/test-results
            TEST_FILES="$(circleci tests glob "spec/**/*_spec.rb" | \
              circleci tests split --split-by=timings)"

            bundle exec rspec \
              --format progress \
              --format RspecJunitFormatter \
              --out /tmp/test-results/rspec.xml \
              --format progress \
              $TEST_FILES
          environment:
            DATABASE_URL: "postgres://ubuntu@localhost:5432/coursemology_test"

      # collect reports
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results

  lint:
    docker:
      # specify the version you desire here
      - image: cimg/ruby:2.7.4-browsers
        environment:
          RAILS_ENV: test

    working_directory: ~/repo

    steps:
      - checkout

      # Checkout submodules
      - run: git submodule update --init --recursive

      - restore_cache:
          keys:
            - v1-yarn-{{ checksum "client/yarn.lock" }}

      - run:
          name: run yarn checks
          command: |
            cd client
            yarn lint

  jstest:
    docker:
      # specify the version you desire here
      - image: cimg/ruby:2.7.4-browsers
        environment:
          RAILS_ENV: test

    working_directory: ~/repo

    steps:
      - checkout

      # Checkout submodules
      - run: git submodule update --init --recursive

      - restore_cache:
          keys:
            - v1-yarn-{{ checksum "client/yarn.lock" }}

      # Build frontend JS
      - run:
          name: run yarn checks
          command: |
            cd client && yarn
            yarn testci

  i18n:
    docker:
      # specify the version you desire here
      - image: cimg/ruby:2.7.4-browsers
        environment:
          PG_HOST: localhost
          PG_USER: ubuntu
          RAILS_ENV: test
          BUNDLE_APP_CONFIG: ~/repo/.bundle

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      - image: circleci/postgres:9.6.11
        environment:
          POSTGRES_USER: ubuntu
          POSTGRES_DB: coursemology_test

    working_directory: ~/repo

    steps:
      - checkout

      # Checkout submodules
      - run: git submodule update --init --recursive

      - restore_cache:
          keys:
            - v3.2-dependencies-{{ checksum "Gemfile.lock" }}
            # fallback to using the latest cache if no exact match is found
            - v3.2-dependencies-

      # Install bundler version
      - run:
          name: install bundler version
          command: gem install bundler:1.17.3

      # Database setup
      - run:
          name: Setup DB
          command: |
            bundle exec rake db:setup
          environment:
            DATABASE_URL: "postgres://ubuntu@localhost:5432/coursemology_test"

      # run i18n checks!
      - run:
          name: run i18n checks
          command: |
            bundle exec i18n-tasks unused
            bundle exec i18n-tasks missing
            bundle exec rake factory_bot:lint
          environment:
            DATABASE_URL: "postgres://ubuntu@localhost:5432/coursemology_test"
workflows:
  version: 2
  build_and_test_and_lint:
    jobs:
      - build
      - lint:
          requires:
            - build
      - jstest:
          requires:
            - build
      - i18n:
          requires:
            - build
      - test:
          requires:
            - lint
            - jstest
            - i18n
