version: 2.1

executors:
  node:
    docker:
      - image: cimg/node:18.12.1

    working_directory: ~/repo
    resource_class: large

  ruby_with_postgres:
    docker:
      - image: cimg/ruby:3.0.5-browsers
        environment:
          PG_HOST: localhost
          PG_USER: ubuntu
          RAILS_ENV: test
          BUNDLE_APP_CONFIG: ~/repo/.bundle
          DATABASE_URL: "postgres://ubuntu@localhost:5432/coursemology_test"

      - image: cimg/postgres:14.5
        environment:
          POSTGRES_USER: ubuntu
          POSTGRES_DB: coursemology_test

    working_directory: ~/repo
    resource_class: large

commands:
  checkout_with_submodules:
    steps:
      - checkout

      # Checkout submodules
      - run:
          name: Checkout submodules
          command: git submodule update --init --recursive

  restore_ruby_cache:
    steps:
      # Install bundler version
      - run:
          name: Install bundler version 2.2.33
          command: gem install bundler:2.2.33

      # Restore cached Ruby dependencies
      - restore_cache:
          keys:
            - v3.0.5-ruby-{{ checksum "Gemfile.lock" }}
            # Fallback to using the latest cache if no exact match is found
            - v3.0.5-ruby-

      # Update Ruby dependencies
      - run:
          name: Install dependencies
          command: |
            bundle install --jobs=4 --retry=3 --path vendor/bundle --without development:production --deployment

      # Recache the updated Ruby dependencies
      - save_cache:
          paths:
            - ./vendor/bundle
            - ./.bundle
          key: v3.0.5-ruby-{{ checksum "Gemfile.lock" }}

  build_and_restore_node_cache:
    steps:
      # Use the desired Node version
      - run:
          name: Swap Node versions
          command: |
            set +e
            wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.1/install.sh | bash
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
            nvm install v18.12.1
            nvm alias default 18.12.1

            echo 'export NVM_DIR="$HOME/.nvm"' >> $BASH_ENV
            echo '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> $BASH_ENV

      # Restore cached Node dependencies
      - restore_cache:
          keys:
            - v18.12.1-node-{{ checksum "client/yarn.lock" }}
            # Fallback to using the latest cache if no exact match is found
            - v18.12.1-node-

      # Update Node dependencies
      - run: cd client && yarn install && cd -

      # Recache the updated Node dependencies
      - save_cache:
          paths:
            - ./client/node_modules
          key: v18.12.1-node-{{ checksum "client/yarn.lock" }}

  restore_node_cache:
    steps:
      - restore_cache:
          name: Restore Node cache
          keys:
            - v18.12.1-node-{{ checksum "client/yarn.lock" }}
            # Fallback to using the latest cache if no exact match is found
            - v18.12.1-node-

  build_and_cache_client:
    steps:
      - run:
          name: Build client
          command: cd client && yarn build:production && cd -
      - save_cache:
          paths:
            - ./client/build
            - ./public/webpack
          key: v1-yarn-build-{{ .Revision }}

  restore_client_cache:
    steps:
      - restore_cache:
          name: Restore client cache
          keys:
            - v1-yarn-build-{{ .Revision }}

  setup_db:
    steps:
      - run:
          name: Setup DB
          command: |
            bundle exec rake db:setup
          environment:
            DATABASE_URL: "postgres://ubuntu@localhost:5432/coursemology_test"

jobs:
  test:
    executor: ruby_with_postgres
    parallelism: 30

    steps:
      - checkout_with_submodules

      - restore_ruby_cache
      - restore_node_cache

      - restore_client_cache

      # Install ghostscript so `identify` in ImageMagick works with PDF files.
      # Remove pdf security policy for imagemagick (ubuntu 20.04)
      # https://stackoverflow.com/questions/52998331/imagemagick-security-policy-pdf-blocking-conversion
      # Installations below are currently disabled as CircleCI would fail to install occasionally
      # - run:
      #     name: install ghostscript and imagemagick
      #     command: |
      #       sudo apt update
      #       sudo apt install imagemagick
      #       sudo apt install ghostscript
      #       sudo sed -i '/disable ghostscript format types/,+6d' /etc/ImageMagick-6/policy.xml

      - setup_remote_docker:
          version: 20.10.18
          docker_layer_caching: true

      - setup_db

      # Run tests!
      - run:
          name: run
          no_output_timeout: 10m
          command: |
            mkdir /tmp/test-results
            TEST_FILES="$(circleci tests glob "spec/**/*_spec.rb" | \
              circleci tests split --split-by=timings)"

            bundle exec rspec \
              --format progress \
              --format RspecJunitFormatter \
              --out /tmp/test-results/rspec.xml \
              --format progress \
              $TEST_FILES

      # Collect reports
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results

  lint:
    executor: ruby_with_postgres

    steps:
      - checkout
      - restore_ruby_cache
      - setup_db

      - run:
          name: Run FactoryBot lint
          command: bundle exec rake factory_bot:lint

  jslint:
    executor: node

    steps:
      - checkout_with_submodules
      - build_and_restore_node_cache
      - build_and_cache_client

      - run:
          name: Run yarn checks
          command: |
            cd client
            yarn lint

  jstest:
    executor: node

    steps:
      - checkout_with_submodules
      - build_and_restore_node_cache
      - build_and_cache_client

      # Build frontend JS
      - run:
          name: Run yarn checks
          command: |
            cd client && yarn
            yarn testci

  i18n:
    executor: ruby_with_postgres

    steps:
      - checkout
      - restore_ruby_cache
      - setup_db

      # Run i18n checks!
      - run:
          name: Run i18n checks
          command: |
            bundle exec i18n-tasks unused
            bundle exec i18n-tasks missing

workflows:
  version: 2
  build_and_test_and_lint:
    jobs:
      - lint
      - jslint
      - jstest
      - i18n
      - test:
          requires:
            - lint
            - jslint
            - jstest
