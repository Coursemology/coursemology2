- assessment = question_assessment.assessment
- question = question_assessment.question

.question-card data-question-dom-id=dom_id(question_assessment)
  .panel.panel-default.card
    .panel-body
      = div_for(question, class: ['clearfix']) do
        div.pull-right
          - if !question.auto_gradable? && assessment.autograded?
            => fa_icon 'exclamation-triangle'.freeze,
                    title: t('.non_auto_gradable'),
                    class: 'text-warning'
          - if can?(:manage, assessment)
            .btn-group
              .btn-group
                .dropdown
                  button.btn.btn-default.dropdown-toggle#duplicate-question-dropdown data-toggle='dropdown'
                    i.fa.fa-copy
                    '
                    span.caret
                  ul.dropdown-menu.dropdown-menu-right
                    - @question_duplication_dropdown_data.each_with_index do |tab_hash, index|
                      - unless index == 0
                        li.divider role='separator'
                      li.dropdown-header = tab_hash[:title]
                      - tab_hash[:assessments].each do |assessment_hash|
                        li
                          = link_to assessment_hash[:title],
                                    duplicate_course_assessment_question_path( \
                                      current_course, assessment, question, assessment_hash[:id]),
                                    class: 'dropdown-item', method: :post, remote: true,
                                    data: { confirm: t('.confirm_duplicate_question', destination: assessment_hash[:title]) }

              - edit_path = url_for([:edit, current_course, assessment, question.specific])
              - delete_path = url_for([current_course, assessment, question.specific])
              = edit_button(edit_path)
              = delete_button(delete_path)
        h4 = format_inline_text(question_assessment.display_title)
        span.label.label-primary
          = format_inline_text(question_assessment.question.question_type)
        p = format_html(question.description)
      - if question.actable.is_a? Course::Assessment::Question::MultipleResponse
          div.pull-right
            = render partial: 'course/assessment/question/multiple_responses/switch_question_type_button',
                     locals: { current_course: current_course,
                               assessment: assessment,
                               multiple_response_question: question.specific,
                               redirect_to_assessment_show: 'true',
                               new_question: false }
          button.btn.btn-default type="button" data-toggle="collapse" data-target="##{question.id}" aria-expanded="false" aria-controls="panel"
            => t('.show_options')
            span.caret
          div
            br
          div.panel.collapse id=("#{question.id}")
            table.table
              - question.actable.options.each do |option|
                tr
                  th
                    -if option.correct
                      li.fa.fa-check-square-o
                    -else
                      li.fa.fa-square-o
                  td
                    = format_html(option.option)
