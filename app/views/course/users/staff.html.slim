/ - add_breadcrumb :staff
/ = page_header

/ = render partial: 'tabs'
div#course-users-component


/ div
/   = simple_form_for :course_user,
/                     url: course_users_upgrade_to_staff_path(current_course),
/                     method: :patch do |f|
/     table.table
/       tr
/         td = f.input :id, collection: @student_options,
/                           label: false, selected: @student_options.first
/         td = f.input :role, collection: CourseUser::STAFF_ROLES_SYM,
/                             label: false,
/                             label_method: lambda { |role_key| t("course.users.role.#{role_key}") },
/                             selected: CourseUser::STAFF_ROLES_SYM.first
/         td = f.button :submit, t('.upgrade_to_staff')

/ div.users
/   div.table-fluid
/     table.table.table-striped.table-hover
/       thead
/         tr
/           th.text-center = t('common.serial_number')
/           th = t('common.name')
/           th = t('common.email')
/           - if current_course.show_personalized_timeline_features?
/             th = t('common.algorithm')
/           th = t('common.role')
/           th = t('course.users.role.phantom')
/           th

/       tbody
/         - @course_users.each.with_index(1) do |user, index|
/           = content_tag_for(:tr, user, 'data-action' => course_user_path(current_course, user),
/                                        'data-method' => 'patch',
/                                        class: 'course-user')
/             = simple_fields_for user, resource: :course_user do |f|
/               td.text-center = index
/               th = f.input :name, label: false
/               td = f.object.user.email
/               - if current_course.show_personalized_timeline_features?
/                 td = f.input :timeline_algorithm, as: :select,
/                         collection: CourseUser.timeline_algorithms.keys,
/                         include_blank: false,
/                         label: false,
/                         label_method: lambda {|k| t("course.users.algorithm.#{k}")}
/               td = f.input :role, as: :select,
/                                   collection: CourseUser.roles.keys,
/                                   include_blank: false,
/                                   label: false,
/                                   label_method: lambda { |role_key| t("course.users.role.#{role_key}") }
/               td = f.input :phantom, label: false
/               td
/                 = f.button :submit, id: 'update' do
/                   = fa_icon 'save'.freeze
/                 = delete_button([current_course, f.object],
/                         { data: { confirm: t('course.users.destroy.confirm',
/                                                 role: t("course.users.role.#{user.role}").downcase,
/                                                 name: f.object.user.name,
/                                                 email: f.object.user.email) } })
