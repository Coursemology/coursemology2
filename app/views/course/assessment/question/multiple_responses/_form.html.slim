= simple_form_for [current_course, @assessment, @multiple_response_question] do |f|
  = f.error_notification

  = render partial: 'course/assessment/questions/form', locals: { f: f, question_assessment: @question_assessment }

  - if current_course.allow_mrq_options_randomization
    = f.input :randomize_options, label: t('.randomize_options')

  = f.hidden_field :grading_scheme

  / workaround for plataformatec/simple_form#1284
  div.has-error
    = f.full_error :options

  - type = @multiple_response_question.multiple_choice? ? t('.multiple_choice_option') : t('.multiple_response_option')
  - if f.object.persisted?
    h3 = type

  table.table.table-striped.table-hover.multiple-response-options
    thead
      tr
        th.reorder
        th = t('.correct')
        th = t('.option')
        th = t('.explanation')
        - if current_course.allow_mrq_options_randomization
          th = t('.ignore_randomization')
        th
          div.pull-right
            = link_to_add_association t('.add_option'), f, :options,
                                      find_selector: 'tbody.option_fields', insert_using: 'append'
    tbody.option_fields
      = f.simple_fields_for :options do |options_form|
        = render 'option_fields', f: options_form

  - type = @multiple_response_question.multiple_choice? ? t('.multiple_choice_button') : t('.multiple_response_button')
  - if f.object.persisted?
    - button_text = t('helpers.buttons.update', model: type)
  - else
    - button_text = t('helpers.buttons.create', model: type)
  = f.button :submit, button_text

div.pull-right.question-switch-type-button
  = render partial: 'switch_question_type_button',
            locals: { current_course: current_course,
                      assessment: @question_assessment.assessment,
                      multiple_response_question: @multiple_response_question,
                      redirect_to_assessment_show: 'false',
                      new_question: new_question, }
