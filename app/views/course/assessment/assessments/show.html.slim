- add_breadcrumb format_inline_text(@assessment.title)
= page_header format_inline_text(@assessment.title) do
  - if @assessment.randomization.present?
    = render 'assessment_question_bundle_buttons', assessment: @assessment

  = render 'assessment_management_buttons', assessment: @assessment
  - if can?(:manage, @assessment)
    div.btn-group
      = edit_button([current_course, @assessment])
      = delete_button([current_course, @assessment])

= div_for(@assessment, 'data-assessment-id' => @assessment.id) do
  - unless @assessment.description.blank?
    div.well
      h3 = t('.description')
      = format_html(@assessment.description)

  table.table.table-bordered.details-table
    tbody
      tr.type
        th = t('.type')
        td = @assessment.autograded? ? t('.autograded') : t('.manually_graded')
      - if current_course.gamified?
        tr.base_exp
          th = t('.base_exp')
          td = @assessment.base_exp
        tr.bonus_exp
          th = t('.bonus_exp')
          td = @assessment.time_bonus_exp
      tr.start_at
        th = t('.start_at')
        td = render partial: 'course/lesson_plan/items/personal_or_ref_time',
                    locals: { item: @assessment, course_user: current_course_user, attribute: :start_at, datetime_format: :long }
      - if current_course.gamified?
        tr.bonus_cut_off
          th = t('.bonus_cut_off')
          td
            - if @assessment.bonus_end_at.present?
              = render partial: 'course/lesson_plan/items/personal_or_ref_time',
                       locals: { item: @assessment, course_user: current_course_user, attribute: :bonus_end_at,
                                 datetime_format: :long }
      tr.end_at
        th = t('.end_at')
        td
          - if @assessment.end_at.present?
            = render partial: 'course/lesson_plan/items/personal_or_ref_time',
                     locals: { item: @assessment, course_user: current_course_user, attribute: :end_at, datetime_format: :long }
      - if can?(:observe, @assessment)
        - if @assessment.autograded?
          tr.skippable
            th = t('.skippable')
            td = @assessment.skippable ? t('.allow') : t('.disallow')
          tr.allow_partial_submission
            th = t('.allow_partial_submission')
            td = @assessment.allow_partial_submission ? t('.allow') : t('.disallow')
          tr.show_mcq_answer
            th = t('.show_mcq_answer')
            td = @assessment.show_mcq_answer ? t('.show') : t('.not_show')
        tr.show_mcq_mrq_solution
          th = t('.show_mcq_mrq_solution')
          td = @assessment.show_mcq_mrq_solution ? t('.show') : t('.not_show')
        tr.graded_test_case_types
          th = t('.graded_test_case_types')
          td = format_inline_text(display_graded_test_types(@assessment))

  - if cannot?(:attempt, @assessment)
    h3 = t('.requirements')
    p.condition-not-satisfied = t('.condition_not_satisfied')

    ul
    - @assessment.specific_conditions.each do |condition|
      = content_tag_for(:li, condition) do
        = condition.title

  - if @assessment.assessment_conditions.present?
    h3 = t('.finish_to_unlock')
    = render partial: @assessment.assessment_conditions.includes(:conditional), suffix: 'condition'

  - if can?(:attempt, @assessment) && @assessment.folder.materials.present?
    - enable_link = @course.materials_component_enabled?
    h3 = t('.files') if enable_link || can?(:manage, @assessment)
    = render partial: 'layouts/materials',
      locals: { folder: @assessment.folder,
                enable_link: enable_link,
                tooltip_title: t('.materials_disabled') }

  - if can?(:observe, @assessment)
    - if can?(:manage, @assessment)
      div.pull-right
        div.dropdown id='new-question-dropdown'
          button.btn.btn-info.dropdown-toggle#new-question [type='button' data-toggle='dropdown'
                                                            aria-expanded='true']
            => t('common.new')
            span.caret
          ul.dropdown-menu.dropdown-menu-right role='menu' aria-labelledby='new-question'
            li role='presentation'
              = link_to(t('.new_question.multiple_choice'),
                        new_course_assessment_question_multiple_response_path(current_course, @assessment,
                                                                              { multiple_choice: true }),
                        role: 'menuitem')
            li role='presentation'
              = link_to(t('.new_question.multiple_response'),
                        new_course_assessment_question_multiple_response_path(current_course, @assessment),
                        role: 'menuitem')
            li role='presentation'
              = link_to(t('.new_question.text_response'),
                        new_course_assessment_question_text_response_path(current_course, @assessment),
                        role: 'menuitem')
            li role='presentation'
              = link_to(t('.new_question.voice_response'),
                        new_course_assessment_question_voice_response_path(current_course,
                        @assessment), role: 'menuitem')
            li role='presentation'
              = link_to(t('.new_question.file_upload'),
                        new_course_assessment_question_text_response_path(current_course, @assessment,
                                                                          { file_upload: true }),
                        role: 'menuitem')
            li role='presentation' id='programming-link'
              = link_to(t('.new_question.programming'),
                        new_course_assessment_question_programming_path(current_course, @assessment),
                        role: 'menuitem')
            li role='presentation' id='scribing-link'
              = link_to(t('.new_question.scribing'),
                        new_course_assessment_question_scribing_path(current_course, @assessment),
                        role: 'menuitem')
            / TODO: Uncomment the line below when TextResponseComprehension is ready
            / li role='presentation' id='comprehension-link'
            /   = link_to(t('.new_question.comprehension'),
            /             new_course_assessment_question_text_response_path(current_course, @assessment,
            /                                                               { comprehension: true }),
            /             role: 'menuitem')

    h3 = t('.questions')
    br
    - if @assessment.autograded?
      - unless @assessment.questions.map(&:specific).all?(&:auto_gradable?)
        div.alert.alert-warning
          => fa_icon 'exclamation-triangle'
          = t('.non_auto_gradable_questions')

    div id=('sortable-questions' if can?(:manage, @assessment))
      = render @assessment.question_assessments
