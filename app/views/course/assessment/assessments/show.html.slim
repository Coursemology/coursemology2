- add_breadcrumb format_inline_text(@assessment.title)
= page_header format_inline_text(@assessment.title) do
  = render 'assessment_management_buttons', assessment: @assessment
  - if can?(:manage, @assessment)
    div.btn-group
      = edit_button([current_course, @assessment])
      = delete_button([current_course, @assessment])

= div_for(@assessment, 'data-assessment-id' => @assessment.id) do
  - unless @assessment.description.blank?
    div.well
      h3 = t('.description')
      = format_html(@assessment.description)

  table.table.table-bordered.details-table
    tbody
      tr.type
        th = t('.type')
        td = @assessment.autograded? ? t('.autograded') : t('.manually_graded')
      tr.base_exp
        th = t('.base_exp')
        td = @assessment.base_exp
      tr.bonus_exp
        th = t('.bonus_exp')
        td = @assessment.time_bonus_exp
      tr.start_at
        th = t('.start_at')
        td = format_datetime(@assessment.start_at)
      tr.bonus_cut_off
        th = t('.bonus_cut_off')
        td = format_datetime(@assessment.bonus_end_at) if @assessment.bonus_end_at.present?
      tr.end_at
        th = t('.end_at')
        td = format_datetime(@assessment.end_at) if @assessment.end_at.present?

  - if cannot?(:attempt, @assessment)
    h3 = t('.requirements')
    p.condition-not-satisfied = t('.condition_not_satisfied')

    ul
    - @assessment.specific_conditions.each do |condition|
      = content_tag_for(:li, condition) do
        = condition.title

  - if @assessment.assessment_conditions.present?
    h3 = t('.finish_to_unlock')
    = render partial: @assessment.assessment_conditions.includes(:conditional), suffix: 'condition'

  - if can?(:attempt, @assessment) && @assessment.folder.materials.present?
    h3 = t('.files')
    = render partial: 'layouts/materials', locals: { folder: @assessment.folder }

  - if can?(:manage, @assessment)
    div.pull-right
      div.dropdown
        button.btn.btn-info.dropdown-toggle#new-question [type='button' data-toggle='dropdown'
                                                          aria-expanded='true']
          => t('common.new')
          span.caret
        ul.dropdown-menu.dropdown-menu-right role='menu' aria-labelledby='new-question'
          li role='presentation'
            = link_to(t('.new_question.multiple_choice'),
                      new_course_assessment_question_multiple_response_path(current_course, @assessment,
                                                                            { multiple_choice: true }),
                      role: 'menuitem')
          li role='presentation'
            = link_to(t('.new_question.multiple_response'),
                      new_course_assessment_question_multiple_response_path(current_course, @assessment),
                      role: 'menuitem')
          li role='presentation'
            = link_to(t('.new_question.text_response'),
                      new_course_assessment_question_text_response_path(current_course, @assessment),
                      role: 'menuitem')
          li role='presentation'
            = link_to(t('.new_question.file_upload'),
                      new_course_assessment_question_text_response_path(current_course, @assessment,
                                                                        { file_upload: true }),
                      role: 'menuitem')
          li role='presentation' id='programming-link'
            = link_to(t('.new_question.programming'),
                      new_course_assessment_question_programming_path(current_course, @assessment),
                      role: 'menuitem')
          / Uncomment code to create scribing question
          /li role='presentation'
          /  = link_to(t('.new_question.scribing'),
          /            new_course_assessment_question_scribing_path(current_course, @assessment),
          /            role: 'menuitem')

    h3 = t('.questions')
    br
    - if @assessment.autograded?
      - unless @assessment.questions.map(&:specific).all?(&:auto_gradable?)
        div.alert.alert-warning
          => fa_icon 'exclamation-triangle'
          = t('.non_auto_gradable_questions')

    #sortable-questions
      = render @assessment.questions.map(&:specific)
