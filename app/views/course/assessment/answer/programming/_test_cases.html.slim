- test_cases = question.test_cases
- public_test_cases, private_test_cases = test_cases.partition(&:public?)
- auto_grading = answer.auto_grading ? answer.auto_grading.actable : nil
- answer_test_results_hash = auto_grading ? \
    auto_grading.test_results.map { |result| [result.test_case, result] }.to_h : \
    {}

h3 = t('.test_cases')

table.table.table-striped.table-hover
  thead
    tr
      th = Course::Assessment::Question::ProgrammingTestCase.human_attribute_name(:identifier)
      th = Course::Assessment::Question::ProgrammingTestCase.human_attribute_name(:description)
      th = Course::Assessment::Question::ProgrammingTestCase.human_attribute_name(:hint)
      th = t('.passed')
  tbody
    tr
      th colspan=4
        = t('.public')
    - public_test_cases.each do |test_case|
      - test_case_result = answer_test_results_hash[test_case]
      = content_tag_for(:tr, test_case) do
        th = format_html(test_case.identifier)
        td = format_html(test_case.description)
        td = format_html(test_case.hint) if !test_case_result || !test_case_result.passed?
        td
          = fa_icon('check') if test_case_result && test_case_result.passed?
  - if can?(:grade, answer.answer)
    tbody
      tr
        th colspan=4
          = t('.private')
      - private_test_cases.each do |test_case|
        = content_tag_for(:tr, test_case) do
          th = format_html(test_case.identifier)
          td = format_html(test_case.description)
          td
          td
            - test_case_result = answer_test_results_hash[test_case]
            = fa_icon('check') if test_case_result && test_case_result.passed?

- failed_private_test_cases = private_test_cases. \
    select { |t| !answer_test_results_hash[t] || !answer_test_results_hash[t].passed? }
- if !failed_private_test_cases.empty? && answer.submission.attempting?
    div.panel.panel-danger
      div.panel-heading = t('.failed_message')
      div.panel-body = format_html(failed_private_test_cases.map(&:hint).compact.first)
